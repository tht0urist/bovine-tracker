/*
 * Copyright 2020 ObjectBox Ltd. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all



///  Not really an enum, but binary flags to use across languages
public enum OrderFlags: UInt32 {
    public typealias T = UInt32
    public static var byteSize: Int { return MemoryLayout<UInt32>.size }
    public var value: UInt32 { return self.rawValue }
    ///  Reverts the order from ascending (default) to descending.
    case descending = 1
    ///  Makes upper case letters (e.g. "Z") be sorted before lower case letters (e.g. "a").
    ///  If not specified, the default is case insensitive for ASCII characters.
    case caseSensitive = 2
    ///  For scalars only: changes the comparison to unsigned (default is signed).
    case unsigned = 4
    ///  null values will be put last.
    ///  If not specified, by default null values will be put first.
    case nullsLast = 8
    ///  null values should be treated equal to zero (scalars only).
    case nullsZero = 16
    

    public static var max: OrderFlags { return .nullsZero }
    public static var min: OrderFlags { return .descending }
}

extension Array where Element == OrderFlags {
    var rawValue: UInt32 {
        var combined: UInt32 = 0
        for value in self {
            combined |= value.rawValue
        }
        return combined
    }
}
